z<-z[,28:1]
image(1:28,1:28,z,main=paste0("rec_error: ", round(rec_error[i],4)),col=cus_col(256))
}
on.exit(par(op))
}
plotDigits <- function(data, rec_error, rows) {
row_idx <- order(rec_error[,1],decreasing=F)[rows]
my_rec_error <- rec_error[row_idx,]
my_data <- as.matrix(as.data.frame(data[row_idx,]))
plotDigit(my_data, my_rec_error)
}
plotDigits(test_recon, test_rec_error, c(1:25))
plotDigits(test_recon, test_rec_error, c(1:25))
plotDigits(test_recon, test_rec_error, c(1:25))
plotDigits(test_recon, test_rec_error, c(1:25))
plotDigit <- function(mydata, rec_error) {
len<-nrow(mydata)
N<-ceiling(sqrt(len))
op <- par(mfrow=c(N,N),pty='s',mar=c(1,1,1,1),xaxt='n',yaxt='n')
for (i in 1:nrow(mydata)) {
colors<-c('red','green')
cus_col<-colorRampPalette(colors=colors)
z<-array(mydata[i,],dim=c(28,28))
z<-z[,28:1]
image(1:28,1:28,z,main=paste0("rec_error: ", round(rec_error[i],4)),col=cus_col(256))
}
on.exit(par(op))
}
plotDigits(test_hex,   test_rec_error, c(1:25))
plotDigits(test_recon, test_rec_error, c(1:2))
plotDigits(test_recon, test_rec_error, c(1:2))
summary(test_features_deep)
library(h2o)
h2oServer <- h2o.init(nthreads=-1)
homedir <- "/Users/martin/Projects/python/"
TRAIN = "train.csv.gz"
TEST = "test.csv.gz"
train_hex <- h2o.importFile(h2oServer, path = paste0(homedir,TRAIN), header = F, sep = ',', parse=FALSE, destination_frame = 'train.hex')
test_hex <- h2o.importFile(h2oServer, path = paste0(homedir,TEST), header = F, sep = ',', parse=FALSE, destination_frame = 'test.hex')
predictors = c(1:784)
resp = 785
train_hex <- train_hex[,-resp]
test_hex <- test_hex[,-resp]
ae_model <- h2o.deeplearning(x=predictors,
training_frame=train_hex,
activation="Tanh",
autoencoder=T,
hidden=c(50),
ignore_const_cols=F,
epochs=1)
test_rec_error <- as.data.frame(h2o.anomaly(ae_model, test_hex))
test_features_deep <- h2o.deepfeatures(ae_model, test_hex, layer=1)
summary(test_features_deep)
plotDigit <- function(mydata, rec_error) {
len<-nrow(mydata)
N<-ceiling(sqrt(len))
op <- par(mfrow=c(N,N),pty='s',mar=c(1,1,1,1),xaxt='n',yaxt='n')
for (i in 1:nrow(mydata)) {
colors<-c('red','green')
cus_col<-colorRampPalette(colors=colors)
z<-array(mydata[i,],dim=c(28,28))
z<-z[,28:1]
image(1:28,1:28,z,main=paste0("rec_error: ", round(rec_error[i],4)),col=cus_col(256))
}
on.exit(par(op))
}
plotDigits <- function(data, rec_error, rows) {
row_idx <- order(rec_error[,1],decreasing=F)[rows]
my_rec_error <- rec_error[row_idx,]
my_data <- as.matrix(as.data.frame(data[row_idx,]))
plotDigit(my_data, my_rec_error)
}
test_recon <- h2o.predict(ae_model, test_hex)
summary(test_recon)
plotDigits(test_recon, test_rec_error, c(1:2))
plotDigits(test_hex,   test_rec_error, c(1:25))
summary(test_features_deep)
test <- order(error[,1],decreasing=T)[c(0:10)]
h2o.shutdown(prompt = TRUE)
library(h2o)
library(ggplot2)
h2o.init()
# IMPORT FILES
digitsTrainPath = "/users/martin/Projects/school/machinelearning/mnist/train.csv"
digitsTrain.hex = h2o.importFile(path = digitsTrainPath)
digitsTestPath = "/users/martin/Projects/school/machinelearning/mnist/test.csv"
digitsTest.hex = h2o.importFile(path = digitsTestPath)
predictors = c(1:784)
resp = 785
train.hex <- digitsTrain.hex[,-resp]
test.hex <- digitsTest.hex[,-resp]
#train.hex <- train.hex[1:10,]
#test.hex <- test.hex[1:10,]
model = h2o.deeplearning(
x=predictors,
training_frame = train.hex,
hidden = c(50),
epochs = 1,
activation = "Tanh",
autoencoder = TRUE,
ignore_const_cols = FALSE
)
library(h2o)
library(ggplot2)
h2o.init()
# IMPORT FILES
digitsTrainPath = "/users/martin/Projects/school/machinelearning/mnist/train.csv"
digitsTrain.hex = h2o.importFile(path = digitsTrainPath)
digitsTestPath = "/users/martin/Projects/school/machinelearning/mnist/test.csv"
digitsTest.hex = h2o.importFile(path = digitsTestPath)
predictors = c(1:784)
resp = 785
train.hex <- digitsTrain.hex[,-resp]
test.hex <- digitsTest.hex[,-resp]
#train.hex <- train.hex[1:10,]
#test.hex <- test.hex[1:10,]
model = h2o.deeplearning(
x=predictors,
training_frame = train.hex,
hidden = c(50),
epochs = 1,
activation = "Tanh",
autoencoder = TRUE,
ignore_const_cols = FALSE
)
anomalies = h2o.anomaly(
model,
test.hex,
per_feature=TRUE
)
predict = h2o.predict(model, test.hex)
error <- as.data.frame(anomalies)
orderedError <- order(error[,1], decreasing = FALSE)
first <- which(orderedError < 10, arr.in=TRUE)
last <- which(orderedError > 27990, arr.in=TRUE)
test <- order(error[,1],decreasing=T)[c(0:10)]
par( mfrow = c(10,10), mai = c(0,0,0,0))
for(i in test){
y = as.matrix(test.hex[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
y = as.matrix(predict[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
#text( 0.2, 0, digitsTest.hex[i,1], cex = 3, col = 2, pos = c(3,4))
}
par( mfrow = c(10,10), mai = c(0,0,0,0))
for(i in last){
y = as.matrix(digitsTest.hex[i, 2:785])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
text( 0.2, 0, digitsTest.hex[i,1], cex = 3, col = 2, pos = c(3,4))
}
par( mfrow = c(10,10), mai = c(0,0,0,0))
for(i in test){
y = as.matrix(test.hex[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
y = as.matrix(predict[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
#text( 0.2, 0, digitsTest.hex[i,1], cex = 3, col = 2, pos = c(3,4))
}
test <- order(error[,1],decreasing=T)[c(27990:28000)]
par( mfrow = c(10,10), mai = c(0,0,0,0))
for(i in test){
y = as.matrix(test.hex[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
y = as.matrix(predict[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
#text( 0.2, 0, digitsTest.hex[i,1], cex = 3, col = 2, pos = c(3,4))
}
order(error[,1],decreasing=T)[27990:28000]
sort(error[,1],decreasing=T)[27990:28000]
sort(error[,1],decreasing=T)[1:10]
for(i in test){ i }
for(i in test){ print(i) }
plot(sort(error$reconstr_label.SE), main='Reconstruction Error')
plot(sort(error$reconstr_pixel33.SE), main='Reconstruction Error')
sort(error$reconstr_pixel33.SE)[0:10]
test <- order(error[,1],decreasing=F)[c(27990:28000)]
par( mfrow = c(10,10), mai = c(0,0,0,0))
for(i in test){
y = as.matrix(test.hex[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
y = as.matrix(predict[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
#text( 0.2, 0, digitsTest.hex[i,1], cex = 3, col = 2, pos = c(3,4))
}
par( mfrow = c(10,10), mai = c(0,0,0,0))
for(i in test){
y = as.matrix(test.hex[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
y = as.matrix(predict[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
text( 0.2, 0, error[i,1], cex = 3, col = 2, pos = c(3,4))
}
par( mfrow = c(10,10), mai = c(0,0,0,0))
for(i in test){
y = as.matrix(test.hex[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
y = as.matrix(predict[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
#  text( 0.2, 0, error[i,1], cex = 3, col = 2, pos = c(3,4))
print(error[i,1])
}
par( mfrow = c(10,10), mai = c(0,0,0,0))
for(i in first){
y = as.matrix(test.hex[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
y = as.matrix(predict[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
#  text( 0.2, 0, error[i,1], cex = 3, col = 2, pos = c(3,4))
print(error[i,1])
}
test <- order(error[,1],decreasing=F)[c(0:10)]
par( mfrow = c(10,10), mai = c(0,0,0,0))
for(i in test){
y = as.matrix(test.hex[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
y = as.matrix(predict[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
#  text( 0.2, 0, error[i,1], cex = 3, col = 2, pos = c(3,4))
print(error[i,1])
}
anomalies
anomalies$reconstr_label.SE
sort(anomalies$reconstr_label.SE)
sort(error$reconstr_label.SE)
sort(error$reconstr_label.SE)[1:10]
sort(error$reconstr_label.SE)[27990:28000]
for(i in test){
y = as.matrix(test.hex[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
y = as.matrix(predict[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
#  text( 0.2, 0, error[i,1], cex = 3, col = 2, pos = c(3,4))
print(i, error[i,1])
}
par( mfrow = c(10,10), mai = c(0,0,0,0))
for(i in test){
y = as.matrix(test.hex[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
y = as.matrix(predict[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
#  text( 0.2, 0, error[i,1], cex = 3, col = 2, pos = c(3,4))
print(error[i,1])
}
test <- order(error[,1],decreasing=F)[c(14000:14010)]
par( mfrow = c(10,10), mai = c(0,0,0,0))
for(i in test){
y = as.matrix(test.hex[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
y = as.matrix(predict[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
#  text( 0.2, 0, error[i,1], cex = 3, col = 2, pos = c(3,4))
print(error[i,1])
}
test <- order(error[,1],decreasing=F)[c(14001:14001)]
par( mfrow = c(10,10), mai = c(0,0,0,0))
for(i in test){
y = as.matrix(test.hex[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
y = as.matrix(predict[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
#  text( 0.2, 0, error[i,1], cex = 3, col = 2, pos = c(3,4))
print(error[i,1])
}
h2o.shutdown(prompt = TRUE)
library(h2o)
library(ggplot2)
h2o.init()
# IMPORT FILES
digitsTrainPath = "/users/martin/Projects/school/machinelearning/mnist/train.csv"
digitsTrain.hex = h2o.importFile(path = digitsTrainPath)
digitsTestPath = "/users/martin/Projects/school/machinelearning/mnist/test.csv"
digitsTest.hex = h2o.importFile(path = digitsTestPath)
predictors = c(1:784)
resp = 785
train.hex <- digitsTrain.hex[,-resp]
test.hex <- digitsTest.hex[,-resp]
#train.hex <- train.hex[1:10,]
#test.hex <- test.hex[1:10,]
model = h2o.deeplearning(
x=predictors,
training_frame = train.hex,
hidden = c(50),
epochs = 1,
activation = "Tanh",
autoencoder = TRUE,
ignore_const_cols = FALSE
)
anomalies = h2o.anomaly(
model,
test.hex
)
predict = h2o.predict(model, test.hex)
error <- as.data.frame(anomalies)
orderedError <- order(error[,1], decreasing = FALSE)
first <- which(orderedError < 10, arr.in=TRUE)
last <- which(orderedError > 27990, arr.in=TRUE)
test <- order(error[,1],decreasing=F)[c(14001:14001)]
par( mfrow = c(10,10), mai = c(0,0,0,0))
for(i in test){
y = as.matrix(test.hex[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
y = as.matrix(predict[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
#  text( 0.2, 0, error[i,1], cex = 3, col = 2, pos = c(3,4))
print(error[i,1])
}
test <- order(error[,1],decreasing=F)[c(0:10)]
par( mfrow = c(10,10), mai = c(0,0,0,0))
for(i in test){
y = as.matrix(test.hex[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
y = as.matrix(predict[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
#  text( 0.2, 0, error[i,1], cex = 3, col = 2, pos = c(3,4))
print(error[i,1])
}
test <- order(error[,1],decreasing=F)[c(27990:28000)]
par( mfrow = c(10,10), mai = c(0,0,0,0))
for(i in test){
y = as.matrix(test.hex[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
y = as.matrix(predict[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
#  text( 0.2, 0, error[i,1], cex = 3, col = 2, pos = c(3,4))
print(error[i,1])
}
test <- order(error[,1],decreasing=F)[c(14000:14010)]
par( mfrow = c(10,10), mai = c(0,0,0,0))
for(i in test){
y = as.matrix(test.hex[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
y = as.matrix(predict[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
#  text( 0.2, 0, error[i,1], cex = 3, col = 2, pos = c(3,4))
print(error[i,1])
}
test <- order(error[,1],decreasing=F)[c(50:60)]
par( mfrow = c(10,10), mai = c(0,0,0,0))
for(i in test){
y = as.matrix(test.hex[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
y = as.matrix(predict[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
#  text( 0.2, 0, error[i,1], cex = 3, col = 2, pos = c(3,4))
print(error[i,1])
}
test <- order(error[,1],decreasing=F)[c(27990:28000)]
test <- order(error[,1],decreasing=F)[c(27990:28000)]
par( mfrow = c(10,10), mai = c(0,0,0,0))
for(i in test){
y = as.matrix(test.hex[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
y = as.matrix(predict[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
#  text( 0.2, 0, error[i,1], cex = 3, col = 2, pos = c(3,4))
print(error[i,1])
}
plot(sort(error$reconstr_label.SE), main='Reconstruction Error')
plot(sort(error$reconstr_label.SE), 0, 70, main='Reconstruction Error')
plot(sort(error$reconstr_label.SE))
sort(error$reconstr_label.SE)
sort(error$Reconstruction.MSE)
plot(sort(error$Reconstruction.MSE))
par( mfrow = c(10,10), mai = c(0,0,0,0))
par( mfrow = c(100,100), mai = c(0,0,0,0))
plot(sort(error$Reconstruction.MSE))
par( mfrow = c(1,1), mai = c(0,0,0,0))
plot(sort(error$Reconstruction.MSE))
plot(sort(error$reconstr_label.SE), 0, 70, main='Reconstruction Error')
plot(sort(error$Reconstruction.MSE), 0, 70, main='Reconstruction Error')
plot(sort(error$Reconstruction.MSE), main='Reconstruction Error')
plot(sort(error$Reconstruction.MSE)[0:100], main='Reconstruction Error')
par( mfrow = c(2,2), mai = c(0,0,0,0))
plot(sort(error$Reconstruction.MSE)[0:100], main='Reconstruction Error')
plot(sort(error$Reconstruction.MSE)[0:1000], main='Reconstruction Error')
plot(sort(error$Reconstruction.MSE)[0:1000], main='Reconstruction Error', ylab = "a")
plot(sort(error$Reconstruction.MSE)[0:1000], main='Reconstruction Error', ylab = "a")
plot(sort(error$Reconstruction.MSE)[0:1000], main='Reconstruction Error', ylab = "a")
getwd()
setwd("~/")
getwd()
getwd()
setwd("~/Projects/school/machinelearning/camera_anomalies")
getwd()
digitsTrainPath = getwd() + "/mnist/train.csv"
digitsTrain.hex = h2o.importFile(path = digitsTrainPath)
digitsTestPath = getwd() + "/mnist/test.csv"
digitsTest.hex = h2o.importFile(path = digitsTestPath)
getwd()
digitsTrainPath = getwd() + "/mnist/train.csv"
digitsTrain.hex = h2o.importFile(path = digitsTrainPath)
digitsTestPath = getwd() + "/mnist/test.csv"
digitsTest.hex = h2o.importFile(path = digitsTestPath)
getwd()
getwd() + "/mnist/train.csv"
digitsTrainPath = paste(getwd(), "/mnist/train.csv")
digitsTrainPath
digitsTrainPath = paste(getwd(), "mnist/train.csv", sep = "/")
digitsTrainPath
digitsTrainPath = paste(getwd(), "mnist/train.csv", sep = "/")
digitsTrain.hex = h2o.importFile(path = digitsTrainPath)
digitsTestPath = paste(getwd(), "mnist/test.csv", sep = "/")
digitsTest.hex = h2o.importFile(path = digitsTestPath)
library(h2o)
library(ggplot2)
h2o.init()
# IMPORT TRAIN FILES
digitsTrainPath = paste(getwd(), "mnist/train.csv", sep = "/")
digitsTrain.hex = h2o.importFile(path = digitsTrainPath)
# IMPORT TEST FILES
digitsTestPath = paste(getwd(), "mnist/test.csv", sep = "/")
digitsTest.hex = h2o.importFile(path = digitsTestPath)
# The data consists of 784(28^2) columns, 785 is a label(0,1,2,...,9)
predictors = c(1:784)
resp = 785
# We do unsupervised learning so we can drop the label column
train.hex <- digitsTrain.hex[,-resp]
test.hex <- digitsTest.hex[,-resp]
# Traing unsupervised deep learning autoencoder
model = h2o.deeplearning(
x=predictors,
training_frame = train.hex,
hidden = c(50),
epochs = 1,
activation = "Tanh",
autoencoder = TRUE,
ignore_const_cols = FALSE
)
# Find anomalies
anomalies = h2o.anomaly(
model,
test.hex
)
error <- as.data.frame(anomalies)
# Reconstruct original data from autoencoder
predict = h2o.predict(model, test.hex)
#
biggest_errors <- order(error[,1], decreasing = FALSE)[c(27990:28000)]
smallest_errors <- order(error[,1], decreasing = FALSE)[c(0:10)]
par( mfrow = c(10,10), mai = c(0,0,0,0))
for(i in smallest_errors){
y = as.matrix(test.hex[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
y = as.matrix(predict[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
}
for(i in biggest_errors){
y = as.matrix(test.hex[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
y = as.matrix(predict[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
}
biggest_errors <- order(error[,1], decreasing = FALSE)[c(27991:28000)]
smallest_errors <- order(error[,1], decreasing = FALSE)[c(0:10)]
par( mfrow = c(10,10), mai = c(0,0,0,0))
for(i in smallest_errors){
y = as.matrix(test.hex[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
y = as.matrix(predict[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
}
for(i in biggest_errors){
y = as.matrix(test.hex[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
y = as.matrix(predict[i, 1:784])
dim(y) = c(28, 28)
image( y[,nrow(y):1], axes = FALSE, col = gray(255:0 / 255))
}
